on:
  push:
    tags:
    - 'v*.*.*'
    - 'v*.*'

name: Make release

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version_tag: ${{ steps.version_tag.outputs.version_tag }}
    steps:
      - name: Set release version in env
        id: version_tag
        run: echo ::set-output name=version_tag::${GITHUB_REF#refs/*/}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.version_tag.outputs.version_tag }}
          draft: true
          prerelease: false

  build:
    name: Upload Release Asset (${{ matrix.OSNAME }})
    runs-on: ${{ matrix.os }}-latest
    needs: create_release
    env:
      CHEZ_SCHEME_VERSION: '10.0.0'
    strategy:
      matrix:
        include:
          - os: macos
            BUNDLE_EXT: tar.gz
            ASSET_CONTENT_TYPE: application/gzip
            OSNAME: macOS
          - os: ubuntu
            BUNDLE_EXT: tar.gz
            ASSET_CONTENT_TYPE: application/gzip
            OSNAME: linux
          - os: windows
            BUNDLE_EXT: zip
            ASSET_CONTENT_TYPE: application/zip
            OSNAME: windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Chez cache
        id: shen-scheme-chez-cache
        uses: actions/cache@v2
        with:
          path: _build/chez
          key: shen-scheme-chez-cache-${{ matrix.os }}-${{ env.CHEZ_SCHEME_VERSION }}
      - name: Install deps (Ubuntu)
        run: sudo apt-get install -y uuid-dev
        if: runner.os == 'linux'
      - name: Build and test
        run: |
          make fetch-kernel
          make fetch-prebuilt
          make precompile-with-prebuilt
          make csversion=$CHEZ_SCHEME_VERSION
          make test
      - name: Create binary release for ${{ matrix.OSNAME }}
        run: make binary-release
      - name: Create source release
        if: runner.os == 'linux'
        run: make source-release
      - name: Upload Release Asset (binary for ${{ matrix.OSNAME }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./_dist/shen-scheme-${{ needs.create_release.outputs.version_tag }}-${{ matrix.OSNAME }}-bin.${{ matrix.BUNDLE_EXT }}
          asset_name: shen-scheme-${{ needs.create_release.outputs.version_tag }}-${{ matrix.OSNAME }}-bin.${{ matrix.BUNDLE_EXT }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Upload Release Asset (sources)
        if: runner.os == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./_dist/shen-scheme-${{ needs.create_release.outputs.version_tag }}-src.${{ matrix.BUNDLE_EXT }}
          asset_name: shen-scheme-${{ needs.create_release.outputs.version_tag }}-src.${{ matrix.BUNDLE_EXT }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}